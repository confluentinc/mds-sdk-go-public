// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_rbac_role_binding_summaries.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_mds_sdk_go_mdsv2alpha1 "github.com/confluentinc/mds-sdk-go/mdsv2alpha1"
)

// RBACRoleBindingSummariesApi is a mock of RBACRoleBindingSummariesApi interface
type RBACRoleBindingSummariesApi struct {
	lockLookupPrincipalsWithRole sync.Mutex
	LookupPrincipalsWithRoleFunc func(ctx context.Context, roleName string, scope github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope) ([]string, *net_http.Response, error)

	lockLookupPrincipalsWithRoleOnResource sync.Mutex
	LookupPrincipalsWithRoleOnResourceFunc func(ctx context.Context, roleName, resourceType, resourceName string, scope github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope) ([]string, *net_http.Response, error)

	lockManagedNonResourceRoleBindingsAtScope sync.Mutex
	ManagedNonResourceRoleBindingsAtScopeFunc func(ctx context.Context, scope github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope) ([]github_com_confluentinc_mds_sdk_go_mdsv2alpha1.ManagedRoleBinding, *net_http.Response, error)

	lockMyAllowedResources sync.Mutex
	MyAllowedResourcesFunc func(ctx context.Context, resourceType, operation string, scope github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope) ([]github_com_confluentinc_mds_sdk_go_mdsv2alpha1.ResourcePattern, *net_http.Response, error)

	lockMyRoleBindings sync.Mutex
	MyRoleBindingsFunc func(ctx context.Context, principal string, scope github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope) ([]github_com_confluentinc_mds_sdk_go_mdsv2alpha1.ScopeRoleBindingMapping, *net_http.Response, error)

	calls struct {
		LookupPrincipalsWithRole []struct {
			Ctx      context.Context
			RoleName string
			Scope    github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope
		}
		LookupPrincipalsWithRoleOnResource []struct {
			Ctx          context.Context
			RoleName     string
			ResourceType string
			ResourceName string
			Scope        github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope
		}
		ManagedNonResourceRoleBindingsAtScope []struct {
			Ctx   context.Context
			Scope github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope
		}
		MyAllowedResources []struct {
			Ctx          context.Context
			ResourceType string
			Operation    string
			Scope        github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope
		}
		MyRoleBindings []struct {
			Ctx       context.Context
			Principal string
			Scope     github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope
		}
	}
}

// LookupPrincipalsWithRole mocks base method by wrapping the associated func.
func (m *RBACRoleBindingSummariesApi) LookupPrincipalsWithRole(ctx context.Context, roleName string, scope github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope) ([]string, *net_http.Response, error) {
	m.lockLookupPrincipalsWithRole.Lock()
	defer m.lockLookupPrincipalsWithRole.Unlock()

	if m.LookupPrincipalsWithRoleFunc == nil {
		panic("mocker: RBACRoleBindingSummariesApi.LookupPrincipalsWithRoleFunc is nil but RBACRoleBindingSummariesApi.LookupPrincipalsWithRole was called.")
	}

	call := struct {
		Ctx      context.Context
		RoleName string
		Scope    github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope
	}{
		Ctx:      ctx,
		RoleName: roleName,
		Scope:    scope,
	}

	m.calls.LookupPrincipalsWithRole = append(m.calls.LookupPrincipalsWithRole, call)

	return m.LookupPrincipalsWithRoleFunc(ctx, roleName, scope)
}

// LookupPrincipalsWithRoleCalled returns true if LookupPrincipalsWithRole was called at least once.
func (m *RBACRoleBindingSummariesApi) LookupPrincipalsWithRoleCalled() bool {
	m.lockLookupPrincipalsWithRole.Lock()
	defer m.lockLookupPrincipalsWithRole.Unlock()

	return len(m.calls.LookupPrincipalsWithRole) > 0
}

// LookupPrincipalsWithRoleCalls returns the calls made to LookupPrincipalsWithRole.
func (m *RBACRoleBindingSummariesApi) LookupPrincipalsWithRoleCalls() []struct {
	Ctx      context.Context
	RoleName string
	Scope    github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope
} {
	m.lockLookupPrincipalsWithRole.Lock()
	defer m.lockLookupPrincipalsWithRole.Unlock()

	return m.calls.LookupPrincipalsWithRole
}

// LookupPrincipalsWithRoleOnResource mocks base method by wrapping the associated func.
func (m *RBACRoleBindingSummariesApi) LookupPrincipalsWithRoleOnResource(ctx context.Context, roleName, resourceType, resourceName string, scope github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope) ([]string, *net_http.Response, error) {
	m.lockLookupPrincipalsWithRoleOnResource.Lock()
	defer m.lockLookupPrincipalsWithRoleOnResource.Unlock()

	if m.LookupPrincipalsWithRoleOnResourceFunc == nil {
		panic("mocker: RBACRoleBindingSummariesApi.LookupPrincipalsWithRoleOnResourceFunc is nil but RBACRoleBindingSummariesApi.LookupPrincipalsWithRoleOnResource was called.")
	}

	call := struct {
		Ctx          context.Context
		RoleName     string
		ResourceType string
		ResourceName string
		Scope        github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope
	}{
		Ctx:          ctx,
		RoleName:     roleName,
		ResourceType: resourceType,
		ResourceName: resourceName,
		Scope:        scope,
	}

	m.calls.LookupPrincipalsWithRoleOnResource = append(m.calls.LookupPrincipalsWithRoleOnResource, call)

	return m.LookupPrincipalsWithRoleOnResourceFunc(ctx, roleName, resourceType, resourceName, scope)
}

// LookupPrincipalsWithRoleOnResourceCalled returns true if LookupPrincipalsWithRoleOnResource was called at least once.
func (m *RBACRoleBindingSummariesApi) LookupPrincipalsWithRoleOnResourceCalled() bool {
	m.lockLookupPrincipalsWithRoleOnResource.Lock()
	defer m.lockLookupPrincipalsWithRoleOnResource.Unlock()

	return len(m.calls.LookupPrincipalsWithRoleOnResource) > 0
}

// LookupPrincipalsWithRoleOnResourceCalls returns the calls made to LookupPrincipalsWithRoleOnResource.
func (m *RBACRoleBindingSummariesApi) LookupPrincipalsWithRoleOnResourceCalls() []struct {
	Ctx          context.Context
	RoleName     string
	ResourceType string
	ResourceName string
	Scope        github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope
} {
	m.lockLookupPrincipalsWithRoleOnResource.Lock()
	defer m.lockLookupPrincipalsWithRoleOnResource.Unlock()

	return m.calls.LookupPrincipalsWithRoleOnResource
}

// ManagedNonResourceRoleBindingsAtScope mocks base method by wrapping the associated func.
func (m *RBACRoleBindingSummariesApi) ManagedNonResourceRoleBindingsAtScope(ctx context.Context, scope github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope) ([]github_com_confluentinc_mds_sdk_go_mdsv2alpha1.ManagedRoleBinding, *net_http.Response, error) {
	m.lockManagedNonResourceRoleBindingsAtScope.Lock()
	defer m.lockManagedNonResourceRoleBindingsAtScope.Unlock()

	if m.ManagedNonResourceRoleBindingsAtScopeFunc == nil {
		panic("mocker: RBACRoleBindingSummariesApi.ManagedNonResourceRoleBindingsAtScopeFunc is nil but RBACRoleBindingSummariesApi.ManagedNonResourceRoleBindingsAtScope was called.")
	}

	call := struct {
		Ctx   context.Context
		Scope github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope
	}{
		Ctx:   ctx,
		Scope: scope,
	}

	m.calls.ManagedNonResourceRoleBindingsAtScope = append(m.calls.ManagedNonResourceRoleBindingsAtScope, call)

	return m.ManagedNonResourceRoleBindingsAtScopeFunc(ctx, scope)
}

// ManagedNonResourceRoleBindingsAtScopeCalled returns true if ManagedNonResourceRoleBindingsAtScope was called at least once.
func (m *RBACRoleBindingSummariesApi) ManagedNonResourceRoleBindingsAtScopeCalled() bool {
	m.lockManagedNonResourceRoleBindingsAtScope.Lock()
	defer m.lockManagedNonResourceRoleBindingsAtScope.Unlock()

	return len(m.calls.ManagedNonResourceRoleBindingsAtScope) > 0
}

// ManagedNonResourceRoleBindingsAtScopeCalls returns the calls made to ManagedNonResourceRoleBindingsAtScope.
func (m *RBACRoleBindingSummariesApi) ManagedNonResourceRoleBindingsAtScopeCalls() []struct {
	Ctx   context.Context
	Scope github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope
} {
	m.lockManagedNonResourceRoleBindingsAtScope.Lock()
	defer m.lockManagedNonResourceRoleBindingsAtScope.Unlock()

	return m.calls.ManagedNonResourceRoleBindingsAtScope
}

// MyAllowedResources mocks base method by wrapping the associated func.
func (m *RBACRoleBindingSummariesApi) MyAllowedResources(ctx context.Context, resourceType, operation string, scope github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope) ([]github_com_confluentinc_mds_sdk_go_mdsv2alpha1.ResourcePattern, *net_http.Response, error) {
	m.lockMyAllowedResources.Lock()
	defer m.lockMyAllowedResources.Unlock()

	if m.MyAllowedResourcesFunc == nil {
		panic("mocker: RBACRoleBindingSummariesApi.MyAllowedResourcesFunc is nil but RBACRoleBindingSummariesApi.MyAllowedResources was called.")
	}

	call := struct {
		Ctx          context.Context
		ResourceType string
		Operation    string
		Scope        github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope
	}{
		Ctx:          ctx,
		ResourceType: resourceType,
		Operation:    operation,
		Scope:        scope,
	}

	m.calls.MyAllowedResources = append(m.calls.MyAllowedResources, call)

	return m.MyAllowedResourcesFunc(ctx, resourceType, operation, scope)
}

// MyAllowedResourcesCalled returns true if MyAllowedResources was called at least once.
func (m *RBACRoleBindingSummariesApi) MyAllowedResourcesCalled() bool {
	m.lockMyAllowedResources.Lock()
	defer m.lockMyAllowedResources.Unlock()

	return len(m.calls.MyAllowedResources) > 0
}

// MyAllowedResourcesCalls returns the calls made to MyAllowedResources.
func (m *RBACRoleBindingSummariesApi) MyAllowedResourcesCalls() []struct {
	Ctx          context.Context
	ResourceType string
	Operation    string
	Scope        github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope
} {
	m.lockMyAllowedResources.Lock()
	defer m.lockMyAllowedResources.Unlock()

	return m.calls.MyAllowedResources
}

// MyRoleBindings mocks base method by wrapping the associated func.
func (m *RBACRoleBindingSummariesApi) MyRoleBindings(ctx context.Context, principal string, scope github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope) ([]github_com_confluentinc_mds_sdk_go_mdsv2alpha1.ScopeRoleBindingMapping, *net_http.Response, error) {
	m.lockMyRoleBindings.Lock()
	defer m.lockMyRoleBindings.Unlock()

	if m.MyRoleBindingsFunc == nil {
		panic("mocker: RBACRoleBindingSummariesApi.MyRoleBindingsFunc is nil but RBACRoleBindingSummariesApi.MyRoleBindings was called.")
	}

	call := struct {
		Ctx       context.Context
		Principal string
		Scope     github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope
	}{
		Ctx:       ctx,
		Principal: principal,
		Scope:     scope,
	}

	m.calls.MyRoleBindings = append(m.calls.MyRoleBindings, call)

	return m.MyRoleBindingsFunc(ctx, principal, scope)
}

// MyRoleBindingsCalled returns true if MyRoleBindings was called at least once.
func (m *RBACRoleBindingSummariesApi) MyRoleBindingsCalled() bool {
	m.lockMyRoleBindings.Lock()
	defer m.lockMyRoleBindings.Unlock()

	return len(m.calls.MyRoleBindings) > 0
}

// MyRoleBindingsCalls returns the calls made to MyRoleBindings.
func (m *RBACRoleBindingSummariesApi) MyRoleBindingsCalls() []struct {
	Ctx       context.Context
	Principal string
	Scope     github_com_confluentinc_mds_sdk_go_mdsv2alpha1.Scope
} {
	m.lockMyRoleBindings.Lock()
	defer m.lockMyRoleBindings.Unlock()

	return m.calls.MyRoleBindings
}

// Reset resets the calls made to the mocked methods.
func (m *RBACRoleBindingSummariesApi) Reset() {
	m.lockLookupPrincipalsWithRole.Lock()
	m.calls.LookupPrincipalsWithRole = nil
	m.lockLookupPrincipalsWithRole.Unlock()
	m.lockLookupPrincipalsWithRoleOnResource.Lock()
	m.calls.LookupPrincipalsWithRoleOnResource = nil
	m.lockLookupPrincipalsWithRoleOnResource.Unlock()
	m.lockManagedNonResourceRoleBindingsAtScope.Lock()
	m.calls.ManagedNonResourceRoleBindingsAtScope = nil
	m.lockManagedNonResourceRoleBindingsAtScope.Unlock()
	m.lockMyAllowedResources.Lock()
	m.calls.MyAllowedResources = nil
	m.lockMyAllowedResources.Unlock()
	m.lockMyRoleBindings.Lock()
	m.calls.MyRoleBindings = nil
	m.lockMyRoleBindings.Unlock()
}
